<?php
declare(strict_types=1);


use Drupal\jw_preload as _;
use function Functional\each as each_;
use function Functional\map;
use function Functional\none;
use function Functional\pluck;
use function Functional\reindex;
use function Functional\select;
use RightThisMinute\Drupal\extra_log as log;


/**
 * Implements hook_init().
 */
function jw_preload_init () : void
{
  $current_path = current_path();

  if (path_is_admin($current_path))
    return;

  $preloaded = _\preload_metadata_for_path($current_path);

  # Make relevant metadata available via global Drupal JS object.
  $metadata = reindex($preloaded, function($p){ return $p->media_id; });
  $metadata = map($metadata, function($m){ return unserialize($m->value); });

  if (count($metadata) === 0)
    return;

  drupal_add_js(['jw_preload' => ['metadata' => $metadata]], 'setting');
}


/**
 * Implements hook_cron_queue_info().
 */
function jw_preload_cron_queue_info () : array
{
  return
    [ _\PRELOAD_QUEUE =>
      [ 'worker callback' =>
        'Drupal\jw_preload\process_to_preload_queue_item' ]];
}


/**
 * Implements hook_entity_insert().
 */
function jw_preload_entity_insert (stdClass $entity, string $type) : void
{
  $uri = entity_uri($type, $entity);

  if ($uri === null || !isset($uri['path']))
    return;

  _\preload_metadata_for_path($uri['path'], $entity);
}


/**
 * Implements hook_entity_update().
 */
function jw_preload_entity_update (stdClass $entity, string $type) : void
{
  $uri = entity_uri($type, $entity);

  if ($uri === null || !isset($uri['path']))
    return;

  _\preload_metadata_for_path($uri['path'], $entity);
}


/**
 * Implements hook_entity_delete().
 */
function jw_preload_entity_delete (stdClass $entity, string $type) : void
{
  try {
    [$id] = entity_extract_ids($type, $entity);
  }
  catch (\Exception $exn) {
    log\error
      ( 'jw_preload'
      , 'Failed getting IDs of %type entity: %exn'
      , [ '%type' => $type
        , '%exn' => $exn->getMessage()
        , 'entity' => $entity
        , 'exception' => $exn ]);
    return;
  }

  # Delete media relations for this entity
  $relations = _\media_relations_by_entity($type, (int)$id);
  each_($relations, function(_\MediaRelation $rel){
    _\delete_media_relation($rel->media_id, $rel->path);
  });

  # Clear out metadata for related media if these were the last relations.
  $media_ids = pluck($relations, 'media_id');
  _\delete_metadata_by_media_ids_without_relation($media_ids);
}
