<?php
declare(strict_types=1);


use Drupal\jw_preload as _;
use function Functional\each as each_;
use function Functional\map;
use function Functional\none;
use function Functional\reindex;
use function Functional\select;
use RightThisMinute\Drupal\extra_log as log;


/**
 * Implements hook_init().
 */
function jw_preload_init () : void
{
  $current_path = current_path();

  [$entity, $entity_type, $entity_id] =
    _\entity_type_and_id_by_path($current_path);

  # Grab media IDs of videos that would show up on this path.
  $media_ids = module_invoke_all
    ( 'jw_preload_register_media_ids'
    , $current_path
    , $entity
    , $entity_type
    , $entity_id );

  if (count($media_ids) === 0) {
    # Clear out existing references to this path since it seems nobody cares
    # about it anymore.
    $media_ids = _\media_ids_by_path($current_path);

    _\delete_metadata_by_media_ids($media_ids);
    _\delete_media_relations_by_path($current_path);

    return;
  }

  # Record relations not previously recorded.
  $existing = _\media_relations_by_path($current_path);
  $new_media_ids = select($media_ids, function($media_id)use($existing){
    return none($existing, function($existing)use($media_id){
      return $existing->media_id === $media_id;
    });
  });

  try {
    _\add_media_relations($new_media_ids, $current_path, $entity_type, $entity_id);
  }
  catch (Exception $exn) {
    log\error
      ( 'jw_preload'
      , 'Failed saving media relations: %exn'
      , [ '%exn' => $exn->getMessage()
        , 'media IDs' => $new_media_ids
        , 'path' => $current_path
        , 'entity type' => $entity_type
        , 'entity ID' => $entity_id
        , 'exception' => $exn ]);
  }

  $preloaded = _\metadata_by_media_ids($media_ids);

  # Queue missing items for preload.
  $missing = array_diff($media_ids, array_keys($preloaded));
  each_($missing, function($m){ _\queue_media_id_for_preload($m); });

  if (count($preloaded) === 0)
    return;

  # Make relevant metadata available via global Drupal JS object.
  $metadata = reindex($preloaded, function($p){ return $p->media_id; });
  $metadata = map($metadata, function($m){ return unserialize($m->value); });

  if (count($metadata) === 0)
    return;

  drupal_add_js(['jw_preload' => ['metadata' => $metadata]], 'setting');
}


/**
 * Implements hook_cron_queue_info().
 */
function jw_preload_cron_queue_info () : array
{
  return
    [ _\PRELOAD_QUEUE =>
      [ 'worker callback' =>
        'Drupal\jw_preload\process_to_preload_queue_item' ]];
}
